/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package pos.main;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pos.database.DBConfig;
import Custom.Components.table.TableCustom;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Anjana
 */
public class Products extends javax.swing.JPanel {

    private String imagePath;// crreate to store image path of the product

    public Products() {
        initComponents();
        //add style to table and scroll bar 
        TableCustom.apply(TableScollPaneProducts, TableCustom.TableType.MULTI_LINE);
        loadProductsData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textProductID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        textProductName = new Custom.Components.Swing.TextField();
        textProductDescription = new Custom.Components.Swing.TextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        comboboxCategory = new Custom.Components.comboboxes.CustomComboBox();
        jLabel14 = new javax.swing.JLabel();
        textProductPrice = new Custom.Components.Swing.TextField();
        buttonAddProductImage = new Custom.Components.Swing.Button();
        ProductImage = new Custom.Components.Swing.PictureBox();
        buttonAddProduct = new Custom.Components.Swing.Button();
        buttonEditProduct = new Custom.Components.Swing.Button();
        buttonDeleteProduct = new Custom.Components.Swing.Button();
        roundPanel2 = new Custom.Components.Swing.RoundPanel();
        TableScollPaneProducts = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        buttonClear = new Custom.Components.Swing.Button();

        textProductID.setText("jTextField1");

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(23, 102, 255));
        jLabel9.setText("Manage Products");

        textProductName.setToolTipText("");
        textProductName.setName(""); // NOI18N
        textProductName.setShadowColor(new java.awt.Color(23, 102, 255));

        textProductDescription.setToolTipText("");
        textProductDescription.setName(""); // NOI18N
        textProductDescription.setShadowColor(new java.awt.Color(23, 102, 255));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 255));
        jLabel11.setText("Product Name");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 255));
        jLabel12.setText("Product Description");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 153, 255));
        jLabel13.setText("Product Price");

        comboboxCategory.setShadowColor(new java.awt.Color(23, 102, 255));
        comboboxCategory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                comboboxCategoryFocusGained(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 255));
        jLabel14.setText("Product Category");

        textProductPrice.setToolTipText("");
        textProductPrice.setName(""); // NOI18N
        textProductPrice.setShadowColor(new java.awt.Color(23, 102, 255));
        textProductPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textProductPriceFocusGained(evt);
            }
        });

        buttonAddProductImage.setBackground(new java.awt.Color(51, 255, 51));
        buttonAddProductImage.setText("Add Image");
        buttonAddProductImage.setFocusPainted(false);
        buttonAddProductImage.setRippleColor(new java.awt.Color(51, 0, 255));
        buttonAddProductImage.setShadowColor(new java.awt.Color(0, 51, 255));
        buttonAddProductImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddProductImageActionPerformed(evt);
            }
        });

        ProductImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));

        buttonAddProduct.setBackground(new java.awt.Color(0, 204, 255));
        buttonAddProduct.setText("Add Product");
        buttonAddProduct.setFocusPainted(false);
        buttonAddProduct.setRippleColor(new java.awt.Color(51, 0, 255));
        buttonAddProduct.setShadowColor(new java.awt.Color(0, 51, 255));
        buttonAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddProductActionPerformed(evt);
            }
        });

        buttonEditProduct.setBackground(new java.awt.Color(255, 204, 102));
        buttonEditProduct.setText("Edit Product");
        buttonEditProduct.setFocusPainted(false);
        buttonEditProduct.setRippleColor(new java.awt.Color(51, 0, 255));
        buttonEditProduct.setShadowColor(new java.awt.Color(0, 51, 255));
        buttonEditProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditProductActionPerformed(evt);
            }
        });

        buttonDeleteProduct.setBackground(new java.awt.Color(255, 102, 102));
        buttonDeleteProduct.setText("Delete Product");
        buttonDeleteProduct.setFocusPainted(false);
        buttonDeleteProduct.setRippleColor(new java.awt.Color(51, 0, 255));
        buttonDeleteProduct.setShadowColor(new java.awt.Color(0, 51, 255));
        buttonDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteProductActionPerformed(evt);
            }
        });

        roundPanel2.setBackground(new java.awt.Color(204, 255, 255));

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Product Description", "Price", "Category", "ImagePath"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableScollPaneProducts.setViewportView(ProductsTable);
        if (ProductsTable.getColumnModel().getColumnCount() > 0) {
            ProductsTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            ProductsTable.getColumnModel().getColumn(1).setPreferredWidth(75);
            ProductsTable.getColumnModel().getColumn(2).setPreferredWidth(175);
            ProductsTable.getColumnModel().getColumn(3).setPreferredWidth(15);
            ProductsTable.getColumnModel().getColumn(4).setPreferredWidth(75);
            ProductsTable.getColumnModel().getColumn(5).setMinWidth(0);
            ProductsTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            ProductsTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        javax.swing.GroupLayout roundPanel2Layout = new javax.swing.GroupLayout(roundPanel2);
        roundPanel2.setLayout(roundPanel2Layout);
        roundPanel2Layout.setHorizontalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TableScollPaneProducts, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addContainerGap())
        );
        roundPanel2Layout.setVerticalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TableScollPaneProducts)
                .addContainerGap())
        );

        buttonClear.setBackground(new java.awt.Color(204, 204, 255));
        buttonClear.setText("Clear Form");
        buttonClear.setFocusPainted(false);
        buttonClear.setRippleColor(new java.awt.Color(51, 0, 255));
        buttonClear.setShadowColor(new java.awt.Color(0, 51, 255));
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonAddProductImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(ProductImage, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(buttonAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buttonEditProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textProductName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboboxCategory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textProductPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(textProductDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel11)
                                .addComponent(jLabel12)
                                .addComponent(jLabel13)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(roundPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textProductDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textProductPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ProductImage, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(buttonAddProductImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonEditProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(roundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddProductActionPerformed
        try {

            String productName = textProductName.getText().trim();
            String ProductDescription = textProductDescription.getText().trim();
            String productPriceText = textProductPrice.getText().trim();

            // Validate inputs
            if (productName.isEmpty()) {
                showErrorMessage("Error: Product Name cannot be empty.");
                return;
            }
            if (ProductDescription.isEmpty()) {
                showErrorMessage("Error: Product Description cannot be empty.");
                return;
            }
            if (productPriceText.isEmpty()) {
                showErrorMessage("Error: Product Price cannot be empty.");
                return;
            }
            if (comboboxCategory.getSelectedIndex() == -1) {
                showErrorMessage("Error: Product Category cannot be empty.");
                return;
            }
            if (!isValidName(productName)) {
                showErrorMessage("Error: Product name must contain only letters.");
                return;
            }

            double productPrice = Double.parseDouble(textProductPrice.getText().trim());

            if (productPrice <= 0) {
                showErrorMessage("Error: Price must be a positive number.");
                return;
            }

            String Category = comboboxCategory.getSelectedItem().toString();

            insertProducts(productName, ProductDescription, productPrice, Category, imagePath);

        } catch (NumberFormatException e) {
            showErrorMessage("Error: Entered Price id Invalid ");
        }
    }//GEN-LAST:event_buttonAddProductActionPerformed

    private void buttonAddProductImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddProductImageActionPerformed

        //open j file chooser 
        JFileChooser fileChooser = new JFileChooser();

        //filter files only showing image file with file extentions 
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(Products.this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String fileName = selectedFile.getName();
            String projectImageDir = "src/main/resources/images/";

            //create new directory to store the selected image 
            new File(projectImageDir).mkdirs();
            Path destinationPath = Paths.get(projectImageDir + fileName);

            try {

                //copy files to the new directory 
                Files.copy(selectedFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);

                //store new image path
                imagePath = destinationPath.toString();

                //display image in picture box
                displayImage(imagePath);
            } catch (IOException e) {
                showErrorMessage("Error in selecting picture");
            }
        }


    }//GEN-LAST:event_buttonAddProductImageActionPerformed

    private void textProductPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textProductPriceFocusGained


    }//GEN-LAST:event_textProductPriceFocusGained

    //reload combobox when clicked on combobox
    private void comboboxCategoryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboboxCategoryFocusGained
        loadCategories();
    }//GEN-LAST:event_comboboxCategoryFocusGained

    private void buttonEditProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditProductActionPerformed
        try {
            String productIDText = textProductID.getText().trim();
            String productName = textProductName.getText().trim();
            String ProductDescription = textProductDescription.getText().trim();
            String productPriceText = textProductPrice.getText().trim();

            // Validate inputs
            // Validate inputs
            if (productIDText.isEmpty()) {
                showErrorMessage("Error: Product Not Selected.");
                return;
            }
            if (productName.isEmpty()) {
                showErrorMessage("Error: Product Name cannot be empty.");
                return;
            }
            if (ProductDescription.isEmpty()) {
                showErrorMessage("Error: Product Description cannot be empty.");
                return;
            }
            if (productPriceText.isEmpty()) {
                showErrorMessage("Error: Product Price cannot be empty.");
                return;
            }
            if (comboboxCategory.getSelectedIndex() == -1) {
                showErrorMessage("Error: Product Category cannot be empty.");
                return;
            }
            if (!isValidName(productName)) {
                showErrorMessage("Error: Product name must contain only letters.");
                return;
            }
            int ProductID = Integer.parseInt(textProductID.getText().trim());
            double productPrice = Double.parseDouble(textProductPrice.getText().trim());

            if (productPrice <= 0) {
                showErrorMessage("Error: Price must be a positive number.");
                return;
            }

            String Category = comboboxCategory.getSelectedItem().toString();

            editProducts(ProductID, productName, ProductDescription, productPrice, Category, imagePath);

        } catch (NumberFormatException e) {
            showErrorMessage("Error: Entered Price id Invalid ");
        }
    }//GEN-LAST:event_buttonEditProductActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        clearFields();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteProductActionPerformed
       try {
           String ProductIdText = textProductID.getText().trim();
            

            if (ProductIdText.isEmpty()) {
                showErrorMessage("Error: Product Not Selected!!");
                return;
            }
            int sellerId = Integer.parseInt(textProductID.getText().trim());
            deleteProducts(sellerId);

        } catch (NumberFormatException e) {
            showErrorMessage("Error: Product ID must be a number.");
        }
    }//GEN-LAST:event_buttonDeleteProductActionPerformed

    //load categories from categories table to combobox 
    public void loadCategories() {
        try {

            DBConfig mycon = new DBConfig();
            Connection con = mycon.connectDB();

            String sqlGetCategories = "SELECT category_name FROM categories";
            PreparedStatement statementGetCategories = con.prepareStatement(sqlGetCategories);
            ResultSet rs = statementGetCategories.executeQuery();

            comboboxCategory.removeAllItems();
            while (rs.next()) {
                String Name = rs.getString("category_name");
                comboboxCategory.addItem(Name);

            }
        } catch (SQLException e) {
            showErrorMessage("Error: Failed to load Categories.");
        }
    }

    //method to insert products 
    private void insertProducts(String productName, String productDescription, double productPrice, String productCategory, String ImagePath) {

        try {
            DBConfig mycon = new DBConfig();
            Connection con = mycon.connectDB();

            String sql = "INSERT INTO products (product_name, product_description, product_price, product_category ,product_imagepath) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement statement = con.prepareStatement(sql);
            statement.setString(1, productName);
            statement.setString(2, productDescription);
            statement.setDouble(3, productPrice);
            statement.setString(4, productCategory);
            statement.setString(5, ImagePath);

            statement.executeUpdate();

            showSuccessMessage("Product data inserted successfully.");
            loadProductsData();
            clearFields();

        } catch (SQLException e) {

            if (e.getSQLState().equals("23000")) { // SQLState for integrity constraint violation
                showErrorMessage("Error: Product Already in Used");
            } else {
                showErrorMessage("Error: Failed to insert Product data. Please check the connection details.");
            }
            clearFields();
        }

    }

    private void editProducts(int productID, String productName, String productDescription, double productPrice, String productCategory, String ImagePath) {

        try {
            DBConfig mycon = new DBConfig();
            Connection con = mycon.connectDB();

            String sql = "UPDATE products SET product_name = ?, product_description = ?, product_price = ?, product_category = ?,product_imagepath = ? WHERE product_id = ? ";
            PreparedStatement statement = con.prepareStatement(sql);
            statement.setString(1, productName);
            statement.setString(2, productDescription);
            statement.setDouble(3, productPrice);
            statement.setString(4, productCategory);
            statement.setString(5, ImagePath);
            statement.setInt(6, productID);

            statement.executeUpdate();

            showSuccessMessage("Product data Edited successfully.");
            loadProductsData();
            clearFields();

        } catch (SQLException e) {

            if (e.getSQLState().equals("23000")) { // SQLState for integrity constraint violation
                showErrorMessage("Error: Product Already in Used");
            } else {
                showErrorMessage("Error: Failed to Edit Product data. Please check the connection details.");
            }
            clearFields();
        }

    }

     private void deleteProducts(int ProductID) {

        try {
            DBConfig mycon = new DBConfig();
            Connection con = mycon.connectDB();

            String sqlDeleteProducts = "DELETE FROM products WHERE product_id = ?";
            PreparedStatement statementDeleteProducts = con.prepareStatement(sqlDeleteProducts);
            statementDeleteProducts.setInt(1, ProductID);
            statementDeleteProducts.executeUpdate();

            showSuccessMessage("Products data Deleted successfully.");
            loadProductsData();
            clearFields();

        } catch (SQLException e) {

            showErrorMessage("Error: Failed to Delete Products data. Please check the connection details.");

            clearFields();
        }

    }
    //load data to table 
    private void loadProductsData() {

        ProductsTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                loadSelectedRowData();
            }
        });

        try {

            DBConfig mycon = new DBConfig();
            Connection con = mycon.connectDB();
            String sqlGetProducts = "SELECT * FROM products";
            PreparedStatement statementGetProducts = con.prepareStatement(sqlGetProducts);
            ResultSet rs = statementGetProducts.executeQuery();
            DefaultTableModel model = (DefaultTableModel) ProductsTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                int ID = rs.getInt("product_id");
                String Name = rs.getString("product_name");
                String Description = rs.getString("product_description");
                String Price = rs.getString("product_price");
                String Category = rs.getString("product_category");
                String ImagePath = rs.getString("product_imagepath");

                model.addRow(new Object[]{ID, Name, Description, Price, Category, ImagePath});
            }
        } catch (SQLException e) {
            showErrorMessage("Error: Failed to load Product data.");
        }
    }

    //load selected data to text  boxes 
    private void loadSelectedRowData() {

        int selectedRow = ProductsTable.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }

        String productId = ProductsTable.getValueAt(selectedRow, 0).toString();
        String productName = ProductsTable.getValueAt(selectedRow, 1).toString();
        String productDescription = ProductsTable.getValueAt(selectedRow, 2).toString();
        String productPrice = ProductsTable.getValueAt(selectedRow, 3).toString();
        String productCategory = ProductsTable.getValueAt(selectedRow, 4).toString();
        String productImagePath = ProductsTable.getValueAt(selectedRow, 5).toString();

        textProductID.setText(productId);
        textProductName.setText(productName);
        textProductDescription.setText(productDescription);
        textProductPrice.setText(productPrice);
        loadCategories();
        comboboxCategory.setSelectedItem(productCategory);
        imagePath = productImagePath;

        //load image to image box 
        ImageIcon imageIcon = new ImageIcon(productImagePath);
        ProductImage.setImage(imageIcon);
        ProductImage.repaint();

    }

    private void displayImage(String path) {
        ImageIcon imageIcon = new ImageIcon(path);
        ProductImage.setImage(imageIcon);
        ProductImage.repaint();
    }

    private boolean isValidName(String name) {
        Pattern pattern = Pattern.compile("^[ a-zA-Z]+$");
        Matcher matcher = pattern.matcher(name);
        return matcher.matches();
    }

    //clear text boxes 
    private void clearFields() {
        textProductID.setText("");
        textProductName.setText("");
        textProductDescription.setText("");
        textProductPrice.setText("");
        comboboxCategory.setSelectedIndex(-1);
        ProductImage.setImage(null);
        ProductImage.repaint();
    }

    private void showErrorMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showSuccessMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Custom.Components.Swing.PictureBox ProductImage;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JScrollPane TableScollPaneProducts;
    private Custom.Components.Swing.Button buttonAddProduct;
    private Custom.Components.Swing.Button buttonAddProductImage;
    private Custom.Components.Swing.Button buttonClear;
    private Custom.Components.Swing.Button buttonDeleteProduct;
    private Custom.Components.Swing.Button buttonEditProduct;
    private Custom.Components.comboboxes.CustomComboBox comboboxCategory;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel9;
    private Custom.Components.Swing.RoundPanel roundPanel2;
    private Custom.Components.Swing.TextField textProductDescription;
    private javax.swing.JTextField textProductID;
    private Custom.Components.Swing.TextField textProductName;
    private Custom.Components.Swing.TextField textProductPrice;
    // End of variables declaration//GEN-END:variables
}
